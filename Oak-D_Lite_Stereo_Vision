# press q to end the program
# w a s d to move the distance region around
import cv2
import depthai as dai
import numpy as np

# how far the Region of interest(roi) moves 
stepSize = 0.05

# boolean for changes to the roi
newConfig = False

# returns Frames in form openCV can display
def getFrame(queue):
    frame = queue.get()
    return frame.getCvFrame()

def getMonoCamera(pipeline, isleft):
    # Configure Mono Camera(Individual Cameras)
    mono = pipeline.createMonoCamera()
    
    #Set Camera Resolution
    mono.setResolution(dai.MonoCameraProperties.SensorResolution.THE_400_P)

    if isleft:
        #CAM_B is the left camera
        mono.setBoardSocket(dai.CameraBoardSocket.CAM_B)
    else : 
        #CAM_C is the right camera
        mono.setBoardSocket(dai.CameraBoardSocket.CAM_C)
    return mono

def getStereoPair(pipeline, monoLeft, monoRight):
    # Sets up the Stereo Node
    stereo = pipeline.create(dai.node.StereoDepth)
    stereo.setDefaultProfilePreset(dai.node.StereoDepth.PresetMode.HIGH_ACCURACY)
    # Sets the confidence of the AI. 200 recomended 
    # Higher values makes it more acurate but gives less data(more blank spots)
    stereo.initialConfig.setConfidenceThreshold(250)
    # Checks the Image both from left to right and right to left then compares them. improves accuracy
    stereo.setLeftRightCheck(True)
    # Increases the range of the disparity search. makes it better at detecting close things
    stereo.setExtendedDisparity(True)
    # Does more depth steps. helps for long distances and Surface Normals. 
    # is disabled when Median filter is used at higher values
    stereo.setSubpixel(True)

    monoLeft.out.link(stereo.left)
    monoRight.out.link(stereo.right)

    return stereo

# Sets up the Spacial Location Calculator
def getSpatialCalc(pipeline):
    # Pipline
    spatialCalc = pipeline.create(dai.node.SpatialLocationCalculator)
    spatialCalc.setWaitForConfigInput(False)

    # Configure size of window
    topLeft = dai.Point2f(0.4, 0.4)
    bottomRight = dai.Point2f(0.6, 0.6)
    
    config = dai.SpatialLocationCalculatorConfigData()
    config.depthThresholds.lowerThreshold = 100
    config.depthThresholds.upperThreshold = 10000
    config.roi = dai.Rect(topLeft, bottomRight)

    # adds config to spatialCalc
    spatialCalc.inputConfig.setWaitForMessage(False)
    spatialCalc.initialConfig.addROI(config)

    return spatialCalc, config, topLeft, bottomRight

if __name__ == '__main__':

    # Create pipeline
    pipeline = dai.Pipeline()

    # Set up left and right Cameras
    monoLeft = getMonoCamera(pipeline, isleft= True)
    monoRight = getMonoCamera(pipeline, isleft= False)

    # Combine left and right cameras
    stereo = getStereoPair(pipeline, monoLeft, monoRight)

    # Set SpatialCalc
    spatialCalc, config, topLeft, bottomRight = getSpatialCalc(pipeline)

    # Set up XLink for Stereo Camera disparity
    xoutDisp = pipeline.createXLinkOut()
    xoutDisp.setStreamName("disparity")

    # Set up XLink for Stereo Camera Depth
    xoutDepth = pipeline.createXLinkOut()
    xoutDepth.setStreamName("depth")

    # Set up Xlink for SpatialCalc
    xoutCalc = pipeline.createXLinkOut()
    xoutCalc.setStreamName("outSpatialCalc")
    xinCalc = pipeline.createXLinkIn()
    xinCalc.setStreamName("inSpatialCalc")

    #Sets up link for depth and spacial config
    spatialCalc.passthroughDepth.link(xoutDepth.input)
    stereo.depth.link(spatialCalc.inputDepth)
    spatialCalc.out.link(xoutCalc.input)
    xinCalc.out.link(spatialCalc.inputConfig)
    stereo.disparity.link(xoutDisp.input)

    # Corrects for unknown distance Static
    preDepth = 0

    # Pipeline is defined
    with dai.Device(pipeline) as device:

        # Get output queues
        disparityQueue = device.getOutputQueue(name = "disparity", maxSize = 2, blocking = False)
        depthQueue = device.getOutputQueue(name = "depth", maxSize = 2, blocking = False)
        spatialCalcQueue = device.getOutputQueue(name="outSpatialCalc", maxSize=2, blocking=False)
        spatialCalcConfigInQueue = device.getInputQueue("inSpatialCalc")

        # Calculate the colormap
        disparityMultiplier = 255 / stereo.initialConfig.getMaxDisparity()

        color = (255, 255, 255)

        print("Use WASD keys to move ROI!")

        while True:
            # Get frames in cv2 format
            disparity = getFrame(disparityQueue)
            # Get frames for depth values
            dep = depthQueue.get()
            depthFrame = dep.getFrame()

            # ColorMap for view
            disparity = (disparity * disparityMultiplier).astype(np.uint8)
            disparity = cv2.applyColorMap(disparity, cv2.COLORMAP_JET)
            depthFrameColor = cv2.normalize(depthFrame, None, 255, 0, cv2.NORM_INF, cv2.CV_8UC1)
            depthFrameColor = cv2.equalizeHist(depthFrameColor)
            depthFrameColor = cv2.applyColorMap(depthFrameColor, cv2.COLORMAP_HOT)

            # Calculates SpcialData
            spatialData = spatialCalcQueue.get().getSpatialLocations()
            for depthData in spatialData:
                roi = depthData.config.roi
                roi = roi.denormalize(width=depthFrameColor.shape[1], height=depthFrameColor.shape[0])
                xmin = int(roi.topLeft().x)
                ymin = int(roi.topLeft().y)
                xmax = int(roi.bottomRight().x)
                ymax = int(roi.bottomRight().y)

                depthMin = depthData.depthMin
                depthMax = depthData.depthMax

                fontType = cv2.FONT_HERSHEY_TRIPLEX
                cv2.rectangle(depthFrameColor, (xmin, ymin), (xmax, ymax), color, cv2.FONT_HERSHEY_SCRIPT_SIMPLEX)
                cv2.putText(depthFrameColor, f"X: {int(depthData.spatialCoordinates.x)} mm", (xmin + 10, ymin + 20), fontType, 0.5, 255)
                cv2.putText(depthFrameColor, f"Y: {int(depthData.spatialCoordinates.y)} mm", (xmin + 10, ymin + 35), fontType, 0.5, 255)
                cv2.putText(depthFrameColor, f"Z: {int(depthData.spatialCoordinates.z)} mm", (xmin + 10, ymin + 50), fontType, 0.5, 255)

            # Displays Screens
            cv2.imshow("Disparity", disparity)
            cv2.imshow("Depth", depthFrameColor)

                #preDepth = distance
            # Ends Stream when q is pressed
            key = cv2.waitKey(1)
            if key == ord('q'):
                break
            elif key == ord('w'):
                if topLeft.y - stepSize >= 0:
                    topLeft.y -= stepSize
                    bottomRight.y -= stepSize
                    newConfig = True
            elif key == ord('a'):
                if topLeft.x - stepSize >= 0:
                    topLeft.x -= stepSize
                    bottomRight.x -= stepSize
                    newConfig = True
            elif key == ord('s'):
                if bottomRight.y + stepSize <= 1:
                    topLeft.y += stepSize
                    bottomRight.y += stepSize
                    newConfig = True
            elif key == ord('d'):
                if bottomRight.x + stepSize <= 1:
                    topLeft.x += stepSize
                    bottomRight.x += stepSize
                    newConfig = True

            # Sets new Config
            if newConfig:
                config.roi = dai.Rect(topLeft, bottomRight)
                config.calculationAlgorithm = dai.SpatialLocationCalculatorAlgorithm.MIN
                cfg = dai.SpatialLocationCalculatorConfig()
                cfg.addROI(config)
                spatialCalcConfigInQueue.send(cfg)
                newConfig = False
